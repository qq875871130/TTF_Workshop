using System;
using System.IO;
using System.IO.Compression;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using NPOI;
using NPOI.SS.UserModel;
using NPOI.HSSF.UserModel;
using NPOI.XSSF.UserModel;
using NPOI.HSSF;
using Ui_Tip;
using System.Threading;
using TTF_UI.Properties;
using System.Xml;
namespace TTF_UI
{
    public partial class Form1 : Form
    {
        //单例化
        private static Form1 _obj;
        public static Form1 instance
        {
             get
            {
                if (_obj==null)
                {
                    _obj = new Form1();
                }
                return _obj;
            }
            set
            {
                _obj = value;
            }
        }


        string envPath = System.Environment.CurrentDirectory;


        public Form1()
        {
            InitializeComponent();
            _obj = this;
            //切换语言
            LangNow = GetDefultLang();
            SwitchCell();
            SetLanguage(this.Controls);
            
        }

        #region 标签选择
        private bool isWork;
        private bool isShowcase;
        private bool isGroup;
        private bool isSetting;
        public enum enm_select
        {
            work,
            showcase,
            group,
            setting
        }
        //标签选择函数
        public void isSelect(enm_select s)
        {
            ///初始化标签外观状态
            isWork = false;
            isShowcase = false;
            isGroup = false;
            isSetting = false;
            //初始化标签颜色
            Btn_Work.BackColor = Color.FromArgb(23,23,23);
            Btn_Showcase.BackColor = Color.FromArgb(23,23,23);
            Btn_Group.BackColor = Color.FromArgb(23,23,23);
            Btn_Setting.BackColor = Color.FromArgb(23,23,23);
            //初始化标签图标
            Btn_Work.Image = Resources.Folder_Ept;
            Btn_Showcase.Image = Resources.Picture_Ept;
            Btn_Group.Image = Resources.Group_Ept;
            Btn_Setting.Image = Resources.Setting_Ept;
            //初始化指示标外观
            tag_folder.Visible = false;
            tag_showcase.Visible = false;
            tag_group.Visible = false;
            tag_setting.Visible = false;

            
            switch (s)
            {
                case enm_select.work:
                    //设置作品标签外观
                    isWork = true;
                    Btn_Work.BackColor = Color.FromArgb(15,15,15);
                    Btn_Work.Image = Resources.Folder_Filled;
                    tag_folder.Visible = true;

                    //打开作品界面
                    UC_Folder uFolder = new UC_Folder();
                    uFolder.Dock = DockStyle.Fill;
                    MainContainer.Controls.Clear();
                    MainContainer.Controls.Add(uFolder);
                    break;
                case enm_select.showcase:
                    //设置陈列柜标签外观
                    isShowcase = true;
                    Btn_Showcase.BackColor = Color.FromArgb(15, 15, 15);
                    Btn_Showcase.Image = Resources.Picture_Filled;
                    tag_showcase.Visible = true;

                    //打开陈列柜界面
                    UC_Showcase uShowcase = new UC_Showcase();
                    uShowcase.Dock = DockStyle.Fill;
                    MainContainer.Controls.Clear();
                    MainContainer.Controls.Add(uShowcase);
                    break;
                case enm_select.group:
                    //设置成员标签外观
                    isGroup = true;
                    Btn_Group.BackColor = Color.FromArgb(15, 15, 15);
                    Btn_Group.Image = Resources.Group_Filled;
                    tag_group.Visible = true;

                    //打开成员界面
                    UC_Group uGroup = new UC_Group();
                    uGroup.Dock = DockStyle.Fill;
                    MainContainer.Controls.Clear();
                    MainContainer.Controls.Add(uGroup);
                    break;
                case enm_select.setting:
                    //设置设置标签外观
                    isSetting = true;
                    Btn_Setting.BackColor = Color.FromArgb(15, 15, 15);
                    Btn_Setting.Image = Resources.Setting_Filled;
                    tag_setting.Visible = true;

                    //打开设置界面
                    UC_Setting uSetting = new UC_Setting();
                    uSetting.Dock = DockStyle.Fill;
                    MainContainer.Controls.Clear();
                    MainContainer.Controls.Add(uSetting);
                    break;
                default:
                    break;
            }
        }


        private void Btn_Work_Click(object sender, EventArgs e)
        {
            if (!isWork)
            {
                isSelect(enm_select.work);
            }
        }

        private void Btn_Showcase_Click(object sender, EventArgs e)
        {
            if (!isShowcase)
            {
                isSelect(enm_select.showcase);
            }
        }

        private void Btn_Group_Click(object sender, EventArgs e)
        {
            if (!isGroup)
            {
                isSelect(enm_select.group);
            }
        }

        private void Btn_Setting_Click(object sender, EventArgs e)
        {
            if (!isSetting)
            {
                isSelect(enm_select.setting);
            }
        }
        //初始化载入标签页
        private void Form1_Load(object sender, EventArgs e)
        {
            UC_Mainpage uMainpage = new UC_Mainpage();
            uMainpage.Dock = DockStyle.Fill;
            MainContainer.Controls.Clear();
            MainContainer.Controls.Add(uMainpage);
            
        }
        #endregion

        #region 拖动窗体事件
        private int startX;
        private int startY;
        private void panel2_MouseDown(object sender, MouseEventArgs e)
        {
            //this.Cursor = Cursors.SizeAll;
            if (e.Button == MouseButtons.Left)
            {
                startX = e.X;
                startY = e.Y;
            }
        }

        private void panel2_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.Left += e.X - startX;
                this.Top += e.Y - startY;
            }
        }

        private void panel2_MouseUp(object sender, MouseEventArgs e)
        {
            //this.Cursor = Cursors.Default;
        }
        #endregion

        #region 关闭，最小化，最大化
        private void btnClose_Click(object sender, EventArgs e)
        {
            OverrideMessagebox msgb = new OverrideMessagebox();
            string title = LangNow.Trim() == "Chinese_Simplify" ? "提示" : LangNow.Trim() == "Chinese_Tradition" ? "提示" : LangNow.Trim() == "English" ? "Attention" : "提示";
            string content = LangNow.Trim() == "Chinese_Simplify" ? "确定退出吗？" : LangNow.Trim() == "Chinese_Tradition" ? "確定退出嗎？" : LangNow.Trim() == "English" ? "Are you sure to exit?" : "确定退出吗？";
            msgb.Showmsg(content, title, OverrideMessagebox.MyMsgboxBtns.OKCancel, OverrideMessagebox.MyMsgIcon.Info);
            if (msgb.DialogResult == DialogResult.OK)
            {
                Application.Exit();
            }
        }

        private void btn_MaxNshink_Click(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Normal)
            {
                this.WindowState = FormWindowState.Maximized;
                btn_MaxNshink.Image = Resources.shrink;
            }
            else
            {
                this.WindowState = FormWindowState.Normal;
                btn_MaxNshink.Image = Resources.enlarge;
            }
        }

        private void btn_Min_Click(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Minimized;
        }

        #endregion


        #region 设置语言函数

        //读取默认语言(若要修改LangNow进行切换，必须修改后调用SwitchCwll修改列数)
        public string LangNow;
        public string GetDefultLang()
        {
            //实例化Xml对象
            XmlDocument xmlLang = new XmlDocument();
            xmlLang.Load("Language/DefultLanguage.xml");
            //获取到默认语言节点
            XmlNode root = xmlLang.SelectSingleNode("Language");
            string Lang = root.InnerText;
            return Lang;
        }
        //设置默认语言
        public void SetDefultLang(string lang)
        {
            //实例化Xml对象
            XmlDocument xmlLang = new XmlDocument();
            xmlLang.Load("Language/DefultLanguage.xml");
            //获取到默认语言节点
            XmlNode root = xmlLang.SelectSingleNode("Language");
            root.InnerText = lang;
            xmlLang.Save("Language/DefultLanguage.xml");
        }
        //存放多语言风格信息列数
        int textCell = 1;
        int fontCell = 2;
        //根据当前语言切换列数
        public void SwitchCell()
        {
            //去除预匹配项
            string lang = LangNow.Trim();
            textCell = lang == "Chinese_Simplify" ? 1 : lang == "Chinese_Tradition" ? 3 : lang == "English" ? 5 : 1;
            fontCell = lang == "Chinese_Simplify" ? 2 : lang == "Chinese_Tradition" ? 2 : lang == "English" ? 6 : 2;
        }

        public void SetLanguage(Control.ControlCollection ctrlcoll)
        {
            //设置翻译文件路径
            string path = System.Environment.CurrentDirectory + "/Lang.xlsx";
            //NPOI读写excel
            FileStream file = new FileStream(path, FileMode.Open, FileAccess.Read);
            XSSFWorkbook langBook = new XSSFWorkbook(file);
            ISheet sheet = langBook.GetSheet("Sheet1");


            foreach (Control ctrl in ctrlcoll)
            {
                if (ctrl.HasChildren)
                {
                    SetLanguage(ctrl.Controls);
                }
                //if (ctrl.Text == "车牌识别系统")
                //{
                //    ctrl.Text = "Car License Analysis System";
                //}

                for (int i = 1; i <= sheet.LastRowNum; i++)
                {
                    if (ctrl.Name == sheet.GetRow(i).GetCell(0).ToString())
                    {
                        //设置多语言翻译内容
                        ctrl.Text = sheet.GetRow(i).GetCell(textCell).ToString();
                        //提取字体中的字号
                        string Fontset = sheet.GetRow(i).GetCell(fontCell).ToString();
                        //正则表达式截取数字
                        //int Fontsize = int.Parse(Regex.Replace(Fontset, @"[^0-9]+", ""));
                        //正则表达式截取字体
                        //string Fontfam = Regex.Replace(Fontset, @",\d+", "");
                        //设置多语言字体
                        ctrl.Font = new Font(Fontset, ctrl.Font.Size, ctrl.Font.Style);
                    }
                }
            }
        }
        #endregion



        private void Form1_SizeChanged(object sender, EventArgs e)
        {
            ///
            ///

            //if (isShowcase)
            //{
            //    //刷新陈列柜界面（暂时性修复滚动条bug）
            //    UC_Showcase uShowcase = new UC_Showcase();
            //    uShowcase.Dock = DockStyle.Fill;
            //    MainContainer.Controls.Clear();
            //    MainContainer.Controls.Add(uShowcase);
            //}
        }


        #region 解压材质包

        
        private void Form1_Shown(object sender, EventArgs e)
        {
            ExtractWorker.RunWorkerAsync();

        }

        

        enum Extract_State
        {
            Extracting,
            Extracted
        }

        private void ExtractWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            //解压材质包
            string source = envPath + @"\Works\COVID100Days\Corona100days_Data\sharedassets1.assets.resS";
            string result = envPath + @"\Works\COVID100Days\Corona100days_Data\sharedassets1.assets.zip";
            string exception = "";

            
            string title;
            string content;

            if (!File.Exists(source) & !File.Exists(result))
            {
                OverrideMessagebox alertmsg = new OverrideMessagebox();
                title = LangNow.Trim() == "Chinese_Simplify" ? "警告" : LangNow.Trim() == "Chinese_Tradition" ? "警報" : "Caution";
                content = LangNow.Trim() == "Chinese_Simplify" ? "未找到关键场景预设文件，可能导致游戏 Covid 100days 场景异常" : LangNow.Trim() == "Chinese_Tradition" ? "未找到關鍵場景預設檔案，可能導致遊戲Covid 100days場景异常" : "The key scene preset file is not found, which may cause the game covid 100days scene exception";
                alertmsg.Showmsg(content, title, OverrideMessagebox.MyMsgboxBtns.OK, OverrideMessagebox.MyMsgIcon.Warn);
            }

            else if (File.Exists(result)& !File.Exists(source))
            {
                ExtractWorker.ReportProgress(0, Extract_State.Extracting);
                if (IOCompressor.ExtractFromZip(result, Path.GetDirectoryName(result), ref exception))
                {
                    ExtractWorker.ReportProgress(100, Extract_State.Extracted);
                }
                else
                {
                    OverrideMessagebox alertmsg = new OverrideMessagebox();
                    title = LangNow.Trim() == "Chinese_Simplify" ? "警告" : LangNow.Trim() == "Chinese_Tradition" ? "警報" : "Caution";
                    content = exception;
                    alertmsg.Showmsg(content, title, OverrideMessagebox.MyMsgboxBtns.OK, OverrideMessagebox.MyMsgIcon.Error);
                }
            }

        }

        private void ExtractWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            Extract_State state = (Extract_State)e.UserState;
            switch (state)
            {
                case Extract_State.Extracting:
                    Tipmsger("Extracting", Form_Alert.enm_Type.Info);
                    break;
                case Extract_State.Extracted:
                    Tipmsger("Extracted", Form_Alert.enm_Type.Success);
                    break;
                default:
                    break;
            }

        }
        
        private void ExtractWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            Tipmsger("Done", Form_Alert.enm_Type.Info);
        }

        public void Tipmsger(string msg,Form_Alert.enm_Type type)
        {
            Ui_Tip.Form1.instance.Alert(msg, type);
        }


        #endregion



        /// <summary>
        /// 收起展开按钮
        /// </summary>
        //设置开关
        bool isExpend = true;
        bool isClose = false;
        //收放速度
        int speed = 10;
        private void closeNexpend_Click(object sender, EventArgs e)
        {
            timer1.Interval = 1;
            timer1.Start();
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            if (isExpend)
            {
                this.tagpanel.Width += speed;
                if (this.tagpanel.Width + speed >=248)
                {
                    closeNexpend.Image = Resources.closebtn;
                    this.tagpanel.Width = 248;
                    isExpend = false;
                    isClose = true;
                    timer1.Stop();
                }
            }

            if (isClose)
            {
                this.tagpanel.Width -= speed;
                if (this.tagpanel.Width - speed <=84)
                {
                    closeNexpend.Image = Resources.expendbtn;
                    this.tagpanel.Width = 84;
                    isExpend = true;
                    isClose = false;
                    timer1.Stop();
                }
            }


        }

        
    }
}
