using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Ui_Tip;
using MySql.Data;
using MySql.Data.MySqlClient;
using System.Text.RegularExpressions;

namespace TTF_UI
{
    public partial class UC_Setting : UserControl
    {
        public UC_Setting()
        {
            InitializeComponent();
            metroComboBox1.DataSource = Source;
            AutoSwitchSelect(Form1.instance.LangNow);
            Form1.instance.SetLanguage(this.Controls);
        }

        #region 语言
        //定义数据源与值
        private string[] Source = { "中文(简体)", "中文(繁體)", "ENGLISH" };
        public string[] Value = { "Chinese_Simplify", "Chinese_Tradition", "English" };


        //初始化根据当前语言切换选定状态
        private void AutoSwitchSelect(string lang)
        {
            string tranformString = lang.Trim();
            int index = Value.ToList().IndexOf(tranformString);
            //MessageBox.Show(index.ToString());
            metroComboBox1.SelectedText = Source[index];
            metroComboBox1.SelectedIndex = index;
        }

        //选择语言后显示应用按钮，并将更改后的索引赋给全局index
        int indexnow;
        private void metroComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (metroComboBox1.ContainsFocus)
            {
                
                indexnow = metroComboBox1.SelectedIndex;
                langapply.Visible = true;
            }

        }


        private void langapply_Click(object sender, EventArgs e)
        {
            //应用更改
            //MessageBox.Show(Value[indexnow]);
            Form1.instance.SetDefultLang(Value[indexnow]);
            Form1.instance.LangNow = Value[indexnow];
            Form1.instance.SwitchCell();
            Form1.instance.SetLanguage(Form1.instance.Controls);
            langapply.Visible = false;
        }
        #endregion

        #region 连接数据库

        //设置数据库参数
        MySqlConnection conn;
        //连接字符串
        string connectStr = "server= cdb-q6lttdl0.cd.tencentcdb.com; port= 10102 ;user=root ;  database=ttfinfo; password = ";
        /// <summary>
        /// 数据库连接
        /// </summary>
        public void ConnectSQL(string pswd)
        {
            conn = new MySqlConnection(connectStr + pswd + ";");
            try
            {
                conn.Open();
                Ui_Tip.Form1.instance.Alert("Connected!", Form_Alert.enm_Type.Success);
                DisplayList();
            }
            catch (MySqlException ex)       //提示异常
            {
                OverrideMessagebox msgb = new OverrideMessagebox();
                string title, content;
                if (Regex.IsMatch(ex.Message,"Access"))
                {
                    Ui_Tip.Form1.instance.Alert("Password Incorrect!", Form_Alert.enm_Type.Error);
                    title = Form1.instance.LangNow.Trim() == "Chinese_Simplify" ? "错误" : Form1.instance.LangNow.Trim() == "Chinese_Tradition" ? "錯誤" : Form1.instance.LangNow.Trim() == "English" ? "Error" : "错误";
                    content = Form1.instance.LangNow.Trim() == "Chinese_Simplify" ? "密码错误！请重新输入" : Form1.instance.LangNow.Trim() == "Chinese_Tradition" ? "密碼錯誤！請重新鍵入" : Form1.instance.LangNow.Trim() == "English" ? "Password invaliad! Please try again" : "密码错误！请重新输入";
                    msgb.Showmsg(content, title, OverrideMessagebox.MyMsgboxBtns.OK, OverrideMessagebox.MyMsgIcon.Warn, this);
                }
                else if (Regex.IsMatch(ex.Message, "Unable"))
                {
                    Ui_Tip.Form1.instance.Alert("Connection Failed", Form_Alert.enm_Type.Error);
                    title = Form1.instance.LangNow.Trim() == "Chinese_Simplify" ? "警告" : Form1.instance.LangNow.Trim() == "Chinese_Tradition" ? "警告" : Form1.instance.LangNow.Trim() == "English" ? "Alert" : "警告";
                    content = Form1.instance.LangNow.Trim() == "Chinese_Simplify" ? "远程数据库未响应!请稍后再试或先检查网络连接" : Form1.instance.LangNow.Trim() == "Chinese_Tradition" ? "遠程數據庫未響應!請檢查網絡連接或稍後再試" : Form1.instance.LangNow.Trim() == "English" ? "Database is not responding! Please check your network connection or try again later" : "远程数据库未响应!请稍后再试或先检查网络连接";
                    msgb.Showmsg(content, title, OverrideMessagebox.MyMsgboxBtns.OK, OverrideMessagebox.MyMsgIcon.Warn, this);
                }
                else
                {
                    title = Form1.instance.LangNow.Trim() == "Chinese_Simplify" ? "警告" : Form1.instance.LangNow.Trim() == "Chinese_Tradition" ? "警告" : Form1.instance.LangNow.Trim() == "English" ? "Alert" : "警告";
                    msgb.Showmsg(ex.Message, title, OverrideMessagebox.MyMsgboxBtns.OK, OverrideMessagebox.MyMsgIcon.Warn, this);
                }

            }
        }
        #endregion



        #region 成员变动
        MySqlDataAdapter Adapter;
        DataTable datatb;
        public void DisplayList()
        {
            //配置数据源
            string sql = "SELECT * FROM group_info";
            Adapter = new MySqlDataAdapter(sql, conn);
             datatb = new DataTable();
            Adapter.Fill(datatb);
            setGrid.DataSource= datatb;
            //显示
            tablepanel.Dock = DockStyle.Fill;
            tablepanel.Visible = true;
            tablepanel.BringToFront();
            backtype = backType.tableBack;
            tableback.Visible = true;
        }

        //点击输入框自动清零
        private void pswdtextbox_Click(object sender, EventArgs e)
        {
            pswdtextbox.Text = "";
            pswdtextbox.UseSystemPasswordChar = true;
        }

        //登录按钮
        private void btninregist_Click(object sender, EventArgs e)
        {
            ConnectSQL(pswdtextbox.Text);     //连接数据库并显示表数据
        }


        //应用更改并保存至数据库
        private void applyedit_Click(object sender, EventArgs e)
        {
            try
            {
                MySqlCommandBuilder bu = new MySqlCommandBuilder(Adapter);
                Adapter.Update(datatb);
                Ui_Tip.Form1.instance.Alert("Regist Success!", Form_Alert.enm_Type.Success);
            }
            catch (Exception ex)
            {
                OverrideMessagebox msgb = new OverrideMessagebox();
                string title = Form1.instance.LangNow.Trim() == "Chinese_Simplify" ? "警告" : Form1.instance.LangNow.Trim() == "Chinese_Tradition" ? "警報" : Form1.instance.LangNow.Trim() == "English" ? "Alert" : "警告";
                string content = Form1.instance.LangNow.Trim() == "Chinese_Simplify" ? "意料之外的异常！" : Form1.instance.LangNow.Trim() == "Chinese_Tradition" ? "意料之外的異常！" : Form1.instance.LangNow.Trim() == "English" ? "Unexpected Error!" : "意料之外的异常！";
                msgb.Showmsg(content + ": " + ex.Message, title, OverrideMessagebox.MyMsgboxBtns.OK, OverrideMessagebox.MyMsgIcon.Warn);

            }
        }


        //添加行
        private void addrow_Click(object sender, EventArgs e)
        {
            datatb.Rows.Add();
        }


        //删除行
        private void delrow_Click(object sender, EventArgs e)
        {
            try
            {

                if (setGrid.SelectedRows.Count > 0) //删除选中的一行或多行
                {
                    for (int i = setGrid.SelectedRows.Count; i >= 1; i--)
                    {
                        int index = setGrid.SelectedRows[i - 1].Index;
                        setGrid.Rows.RemoveAt(index);
                    }
                }
                else   //未选中行，删除已提交的最后一行
                {
                    int count = setGrid.RowCount;
                    setGrid.Rows.RemoveAt(count - 2);
                }
            }
            catch
            {
                Ui_Tip.Form1.instance.Alert("Remove Failed!", Form_Alert.enm_Type.Error);
            }
        }

        //刷新列表至未更改状态
        private void resettable_Click(object sender, EventArgs e)
        {
            DisplayList();
            Ui_Tip.Form1.instance.Alert("Reset Success!", Form_Alert.enm_Type.Success);
        }

        //选择行
        private void rowmode_Click(object sender, EventArgs e)
        {
            setGrid.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
        }

        //选择单元格
        private void cellmode_Click(object sender, EventArgs e)
        {
            setGrid.SelectionMode = DataGridViewSelectionMode.CellSelect;
        }







        #endregion


        enum backType
        {
            tableBack,
            aboutBack
        }

        private backType backtype;
        private void tableback_Click(object sender, EventArgs e)
        {
            switch (backtype)
            {
                case backType.tableBack:
                    tablepanel.Visible = false;
                    break;
                case backType.aboutBack:
                    aboutpanel.Visible = false;
                    break;
                default:
                    break;
            }
            tableback.Visible = false;
        }

        //关于
        private void btnabout_Click(object sender, EventArgs e)
        {
            aboutpanel.Dock = DockStyle.Fill;
            aboutpanel.Visible = true;
            aboutpanel.BringToFront();
            backtype = backType.aboutBack;
            tableback.Visible = true;
        }
    }
}
