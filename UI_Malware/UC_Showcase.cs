using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using TTF_UI.Properties;
using MyControl;
using Ui_Tip;

namespace TTF_UI
{
    public partial class UC_Showcase : UserControl
    {
        public UC_Showcase()
        {
            InitializeComponent();
            MouseWheel += new MouseEventHandler(this.MouseWheelScroll);    //注册滚轮事件
        }


        #region 添加图片和多媒体
        //计数器
        int count = 0;
        //按类型添加控件
        public void AddBox(MyPictureBox.enm_Type type, string path, Image img = null)
        {
            MyPictureBox box = new MyPictureBox();
            box.Size = new Size(293, 178);
            box.Margin = new Padding(0, 0, 0, 0);
            box.MediaType = type;
            box.MediaPath = path;
            box.EnterBorderStyle = BorderStyle.FixedSingle;
            box.ClickBorderStyle = BorderStyle.Fixed3D;
            box.LeaveBorderStyle = BorderStyle.None;
            //未传入img时以路径读缩略图
            if (img == null)
            {
                try
                {
                    //视频类型时读取ffmpeg截取的缩略图
                    if (type == MyPictureBox.enm_Type.video)
                    {
                        box.BackgroundImage = GetThumbPath(System.Environment.CurrentDirectory, path);
                    }
                    else
                        box.BackgroundImage = Image.FromFile(path);
                }
                catch 
                {
                    OverrideMessagebox msgb = new OverrideMessagebox();
                    string title = Form1.instance.LangNow.Trim() == "Chinese_Simplify" ? "警告" : Form1.instance.LangNow.Trim() == "Chinese_Tradition" ? "警報" : Form1.instance.LangNow.Trim() == "English" ? "Alert" : "警告";
                    string content = Form1.instance.LangNow.Trim() == "Chinese_Simplify" ? "路径错误！" : Form1.instance.LangNow.Trim() == "Chinese_Tradition" ? "路徑錯誤！" : Form1.instance.LangNow.Trim() == "English" ? "FilePath is wrong!" : "路径错误！";
                    msgb.Showmsg(content , title, OverrideMessagebox.MyMsgboxBtns.OK, OverrideMessagebox.MyMsgIcon.Error);
                }
            }
            else
            {
                box.BackgroundImage = img;
            }
            flowcontainer.Controls.Add(box);

            //缩略图修正
            if (box.BackgroundImage !=null)
            {
                if (box.BackgroundImage.Width > box.Size.Width | box.BackgroundImage.Height > box.Size.Height)
                {
                    box.BackgroundImageLayout = ImageLayout.Zoom;
                }
                else
                {
                    box.BackgroundImageLayout = ImageLayout.Center;
                }
                switch (box.MediaType)
                {
                    case MyPictureBox.enm_Type.video:
                        box.Image = Resources.playvid_45px;
                        break;
                    default:
                        break;
                }
            }
            count++;
        }
        #endregion

        #region 视频缩略图批量生成
        private int picCount = 1;
        System.Diagnostics.Process p = new System.Diagnostics.Process();
        public void Creatcmd()
        {
            p.StartInfo.FileName = "cmd.exe";//要执行的程序名称 
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardInput = true;//可能接受来自调用程序的输入信息
            p.StartInfo.RedirectStandardOutput = true;//由调用程序获取输出信息 
            p.StartInfo.CreateNoWindow = true;//不显示程序窗口 
            p.Start();//启动程序 
        }
        public Image GetThumbPath(string currentPath, string vidPath)
        {
            string ffmpegPath = currentPath + "/ffmpeg/obj/bin/";
            string oriVideoPath = vidPath;         //视频全路径
            float frameIndex = 5.0f;
            int thubWidth = 298;
            int thubHeight = 178;
            string thubImagePath = currentPath + "/thmb/thumb" + picCount + ".jpg";
            picCount++;
            //格式化命令行
            string command = string.Format("cd \"{0}\" && ffmpeg -y -i \"{1}\" -ss {2} -vframes 1 -r 1 -ac 1 -ab 2 -s {3}*{4} -f image2 \"{5}\"", ffmpegPath, oriVideoPath, frameIndex, thubWidth, thubHeight, thubImagePath);
            //向CMD窗口发送输入信息： 
            p.StandardInput.WriteLine(command); //截取第5秒的图片保存至路径 
            //获取CMD窗口的输出信息： 
            //string sOutput = p.StandardOutput.ReadToEnd();
            while (!File.Exists(thubImagePath))
            {
                p.WaitForExit(1);
            }
            Image thumbset = Image.FromFile(thubImagePath);
            return thumbset;

        }
        #endregion

        #region 初始化载入媒体
        ///

        private void UC_Showcase_Load(object sender, EventArgs e)
        {
            Creatcmd();
            string FolderPath = System.Environment.CurrentDirectory + "/Showcase";
            DirectoryInfo FolderInfo = new DirectoryInfo(FolderPath);
            //遍历文件夹下所有媒体文件
            foreach (FileInfo FileInfo in FolderInfo.GetFiles())
            {
                string fileName = FileInfo.FullName;
                string fileExt = FileInfo.Extension;
                if (fileExt==".jpg" | fileExt == ".png" | fileExt == ".bmp")
                {
                    AddBox(MyPictureBox.enm_Type.image, fileName);
                }
                if (fileExt == ".mp4" | fileExt == ".avi")
                {
                    AddBox(MyPictureBox.enm_Type.video, fileName);
                }

            }

            Ui_Tip.Form1.instance.Alert(count.ToString() + " Medias Added!", Form_Alert.enm_Type.Info);
            //载入完成后关闭进程
            if (!p.HasExited)
            {
                p.Kill();
                Ui_Tip.Form1.instance.Alert("Generated!", Form_Alert.enm_Type.Success);
            }
        }
        #endregion

        #region 滚动条功能实现
        //滚动页面最大值
        private float ScrollLimit;
        //初始滚动条高度按尺寸缩放的比
        private float ScrollSizeRatio;
        //设置鼠标滚动页面速度
        private int WheelScrollSpeed=1;

        //滚动条状态设置
        public void ScrollSet()
        {
            float displayHeight = this.Size.Height;
            float contentHeight = this.flowcontainer.Size.Height;

            ScrollLimit = (contentHeight - displayHeight) > 0 ? contentHeight - displayHeight : 0;
            ScrollSizeRatio = displayHeight / contentHeight;
            //根据比例设置滚动速度
            WheelScrollSpeed = ScrollSizeRatio > 0.6f ? 1 : 3;
            this.metroScrollBar.LargeChange = (int)(this.metroScrollBar.Maximum * ScrollSizeRatio);
            this.flowcontainer.Location = ScrollSizeRatio>1?new Point(0,0) : new Point(0, -(int)(ScrollLimit * (this.metroScrollBar.Value * 0.01)));
            this.metroScrollBar.Visible = ScrollSizeRatio>1 ? false : true;
        }
        
        private void UC_Showcase_Paint(object sender, PaintEventArgs e)
        {
            ScrollSet();
        }

        private void metroScrollBar1_Scroll(object sender, ScrollEventArgs e)
        {
            ScrollSet();
        }

        private void MouseWheelScroll(object sender, MouseEventArgs e)
        {
            if (e.Delta != 0)
            {
                metroScrollBar.Visible = true;
                if (e.Delta > 0)
                {
                    metroScrollBar.Value = metroScrollBar.Value - WheelScrollSpeed < 0 ? metroScrollBar.Value : metroScrollBar.Value - WheelScrollSpeed;
                }
                else
                    metroScrollBar.Value = metroScrollBar.Value + WheelScrollSpeed > metroScrollBar.Maximum ? metroScrollBar.Value : metroScrollBar.Value + WheelScrollSpeed;
            }
        }

        #endregion




    }
}
