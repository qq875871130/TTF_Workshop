using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using TTF_UI.Properties;
using MetroFramework;

namespace TTF_UI
{
    [ToolboxBitmap(typeof(System.Windows.Forms.MessageBox))]
    public partial  class OverrideMessagebox : Form
    {
        
        //初始化隐藏按钮，渐变显示
        public OverrideMessagebox()
        {
            InitializeComponent();
            this.btn1.Visible = false;
            this.btn2.Visible = false;
            this.btn3.Visible = false;
            Form1.instance.SetLanguage(this.Controls);
            Opacity = 0.0;
            timer1.Interval = 1;
            timer1.Start();
        }


        #region messagebox功能实现
        //声明枚举
        public enum MyMsgboxBtns
        {
            OK,
            OKCancel
        }

        public enum MyMsgIcon
        {
            none,
            Warn,
            Info,
            Error
        } 

        public void Showmsg(string content,string title = null, MyMsgboxBtns msgBtn = MyMsgboxBtns.OK,MyMsgIcon msgIcon = MyMsgIcon.none,IWin32Window owner = null)
        {
            Point b1 = btn1.Location;
            Point b2 = btn2.Location;
            this.Text = title;
            this.Title.Text = title;
            this.contentText.Text = content;
            
            //判断传入按钮type
            switch (msgBtn)
            {
                case MyMsgboxBtns.OK:
                    this.btn1.Visible = true;
                    break;
                case MyMsgboxBtns.OKCancel:
                    //交换确定与取消按钮的位置
                    this.btn1.Location = b2;
                    this.btn2.Location = b1;

                    //显示
                    this.btn1.Visible = true;
                    this.btn2.Visible = true;
                    break;
                default:
                    break;
            }

            //判断传入图标type
            switch (msgIcon)
            {
                case MyMsgIcon.Warn:
                    msgboxicon.Image = Resources.warn_png;
                    this.Icon = Resources.msgb_warn;
                    break;
                case MyMsgIcon.Info:
                    msgboxicon.Image = Resources.info_png;
                    this.Icon = Resources.msgb_info;
                    break;
                case MyMsgIcon.Error:
                    msgboxicon.Image = Resources.error_png;
                    this.Icon = Resources.msgb_error;
                    break;
                case MyMsgIcon.none:
                    msgboxicon.Image = null;
                    this.Icon = null;
                    break;
                default:
                    break;
            }
            //显示图窗
            this.ShowDialog(owner);
        }
       
        //按钮返回结果
        private void btn1_Click(object sender, EventArgs e)
        {
            result = DialogResult.OK;
            isClosing = true;
        }

        private void btn2_Click(object sender, EventArgs e)
        {
            result = DialogResult.Cancel;
            isClosing = true;
        }
        #endregion

        #region 个性化外观
        //存放结果等待渐变后调用
        DialogResult result;
        bool isClosing = false;

        private double speed = 0.04;


        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        [EditorBrowsable(EditorBrowsableState.Always)]
        [Bindable(true)]
        [Description("窗体渐变出现的速度"), Category("外观")]
        public double OpacityLerpSpeed
        {
            get { return speed; }
            set { speed = value; }
        }

        double fadespeed = 0.03;
        [Description("窗体渐变消失的速度"), Category("外观")]
        public double OpacityFadeSpeed
        {
            get { return fadespeed; }
            set { fadespeed = value; }
        }

        #endregion

        //计时器控制渐变
        private void timer1_Tick(object sender, EventArgs e)
        {
            if (isClosing)
            {
                this.Opacity = Opacity - fadespeed;
                if (this.Opacity - fadespeed <= 0.0)
                {
                    this.Opacity = 0.0;
                    this.DialogResult = result;
                }
            }
            else
            {
                this.Opacity = Opacity + speed;
                if (this.Opacity + speed >= 1.0)
                {
                    this.Opacity = 1.0;
                }
            }

        }

        private void OverrideMessagebox_Load(object sender, EventArgs e)
        {

        }
    }
}
